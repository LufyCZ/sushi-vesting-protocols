// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelTransaction extends ethereum.Event {
  get params(): CancelTransaction__Params {
    return new CancelTransaction__Params(this);
  }
}

export class CancelTransaction__Params {
  _event: CancelTransaction;

  constructor(event: CancelTransaction) {
    this._event = event;
  }

  get txHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get eta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExecuteTransaction extends ethereum.Event {
  get params(): ExecuteTransaction__Params {
    return new ExecuteTransaction__Params(this);
  }
}

export class ExecuteTransaction__Params {
  _event: ExecuteTransaction;

  constructor(event: ExecuteTransaction) {
    this._event = event;
  }

  get txHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get eta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDelay extends ethereum.Event {
  get params(): NewDelay__Params {
    return new NewDelay__Params(this);
  }
}

export class NewDelay__Params {
  _event: NewDelay;

  constructor(event: NewDelay) {
    this._event = event;
  }

  get newDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QueueTransaction extends ethereum.Event {
  get params(): QueueTransaction__Params {
    return new QueueTransaction__Params(this);
  }
}

export class QueueTransaction__Params {
  _event: QueueTransaction;

  constructor(event: QueueTransaction) {
    this._event = event;
  }

  get txHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get eta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MasterVampire__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class MasterVampire__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MasterVampire extends ethereum.SmartContract {
  static bind(address: Address): MasterVampire {
    return new MasterVampire("MasterVampire", address);
  }

  DEV_FEE(): BigInt {
    let result = super.call("DEV_FEE", "DEV_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DEV_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DEV_FEE", "DEV_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GRACE_PERIOD(): BigInt {
    let result = super.call("GRACE_PERIOD", "GRACE_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GRACE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GRACE_PERIOD", "GRACE_PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_DELAY(): BigInt {
    let result = super.call("MAXIMUM_DELAY", "MAXIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAXIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_DELAY",
      "MAXIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_DELAY(): BigInt {
    let result = super.call("MINIMUM_DELAY", "MINIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_DELAY",
      "MINIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_START_BLOCK(): BigInt {
    let result = super.call(
      "REWARD_START_BLOCK",
      "REWARD_START_BLOCK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REWARD_START_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_START_BLOCK",
      "REWARD_START_BLOCK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin_initialized(): boolean {
    let result = super.call(
      "admin_initialized",
      "admin_initialized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_admin_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "admin_initialized",
      "admin_initialized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devAddress(): Address {
    let result = super.call("devAddress", "devAddress():(address)", []);

    return result[0].toAddress();
  }

  try_devAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("devAddress", "devAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dracula(): Address {
    let result = super.call("dracula", "dracula():(address)", []);

    return result[0].toAddress();
  }

  try_dracula(): ethereum.CallResult<Address> {
    let result = super.tryCall("dracula", "dracula():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  drainAddress(): Address {
    let result = super.call("drainAddress", "drainAddress():(address)", []);

    return result[0].toAddress();
  }

  try_drainAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("drainAddress", "drainAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingDrc(_pid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "pendingDrc",
      "pendingDrc(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingDrc(_pid: BigInt, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingDrc",
      "pendingDrc(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): MasterVampire__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MasterVampire__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<MasterVampire__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterVampire__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolRewardUpdater(): Address {
    let result = super.call(
      "poolRewardUpdater",
      "poolRewardUpdater():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_poolRewardUpdater(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolRewardUpdater",
      "poolRewardUpdater():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  queueTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    eta: BigInt
  ): Bytes {
    let result = super.call(
      "queueTransaction",
      "queueTransaction(address,uint256,string,bytes,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(eta)
      ]
    );

    return result[0].toBytes();
  }

  try_queueTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    eta: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "queueTransaction",
      "queueTransaction(address,uint256,string,bytes,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(eta)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queuedTransactions(param0: Bytes): boolean {
    let result = super.call(
      "queuedTransactions",
      "queuedTransactions(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_queuedTransactions(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "queuedTransactions",
      "queuedTransactions(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userInfo(param0: BigInt, param1: Address): MasterVampire__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MasterVampire__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<MasterVampire__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MasterVampire__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dracula(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _drainAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _victim(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _victimPoolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardDrainModifier(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _wethDrainModifier(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class CancelTransactionCall extends ethereum.Call {
  get inputs(): CancelTransactionCall__Inputs {
    return new CancelTransactionCall__Inputs(this);
  }

  get outputs(): CancelTransactionCall__Outputs {
    return new CancelTransactionCall__Outputs(this);
  }
}

export class CancelTransactionCall__Inputs {
  _call: CancelTransactionCall;

  constructor(call: CancelTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get eta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CancelTransactionCall__Outputs {
  _call: CancelTransactionCall;

  constructor(call: CancelTransactionCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DrainCall extends ethereum.Call {
  get inputs(): DrainCall__Inputs {
    return new DrainCall__Inputs(this);
  }

  get outputs(): DrainCall__Outputs {
    return new DrainCall__Outputs(this);
  }
}

export class DrainCall__Inputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrainCall__Outputs {
  _call: DrainCall;

  constructor(call: DrainCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get eta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class QueueTransactionCall extends ethereum.Call {
  get inputs(): QueueTransactionCall__Inputs {
    return new QueueTransactionCall__Inputs(this);
  }

  get outputs(): QueueTransactionCall__Outputs {
    return new QueueTransactionCall__Outputs(this);
  }
}

export class QueueTransactionCall__Inputs {
  _call: QueueTransactionCall;

  constructor(call: QueueTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get eta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class QueueTransactionCall__Outputs {
  _call: QueueTransactionCall;

  constructor(call: QueueTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDelayCall extends ethereum.Call {
  get inputs(): SetDelayCall__Inputs {
    return new SetDelayCall__Inputs(this);
  }

  get outputs(): SetDelayCall__Outputs {
    return new SetDelayCall__Outputs(this);
  }
}

export class SetDelayCall__Inputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }

  get delay_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelayCall__Outputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }
}

export class SetPendingAdminCall extends ethereum.Call {
  get inputs(): SetPendingAdminCall__Inputs {
    return new SetPendingAdminCall__Inputs(this);
  }

  get outputs(): SetPendingAdminCall__Outputs {
    return new SetPendingAdminCall__Outputs(this);
  }
}

export class SetPendingAdminCall__Inputs {
  _call: SetPendingAdminCall;

  constructor(call: SetPendingAdminCall) {
    this._call = call;
  }

  get pendingAdmin_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPendingAdminCall__Outputs {
  _call: SetPendingAdminCall;

  constructor(call: SetPendingAdminCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDevAddressCall extends ethereum.Call {
  get inputs(): UpdateDevAddressCall__Inputs {
    return new UpdateDevAddressCall__Inputs(this);
  }

  get outputs(): UpdateDevAddressCall__Outputs {
    return new UpdateDevAddressCall__Outputs(this);
  }
}

export class UpdateDevAddressCall__Inputs {
  _call: UpdateDevAddressCall;

  constructor(call: UpdateDevAddressCall) {
    this._call = call;
  }

  get _devAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDevAddressCall__Outputs {
  _call: UpdateDevAddressCall;

  constructor(call: UpdateDevAddressCall) {
    this._call = call;
  }
}

export class UpdateDrainAddressCall extends ethereum.Call {
  get inputs(): UpdateDrainAddressCall__Inputs {
    return new UpdateDrainAddressCall__Inputs(this);
  }

  get outputs(): UpdateDrainAddressCall__Outputs {
    return new UpdateDrainAddressCall__Outputs(this);
  }
}

export class UpdateDrainAddressCall__Inputs {
  _call: UpdateDrainAddressCall;

  constructor(call: UpdateDrainAddressCall) {
    this._call = call;
  }

  get _drainAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDrainAddressCall__Outputs {
  _call: UpdateDrainAddressCall;

  constructor(call: UpdateDrainAddressCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolDrainCall extends ethereum.Call {
  get inputs(): UpdatePoolDrainCall__Inputs {
    return new UpdatePoolDrainCall__Inputs(this);
  }

  get outputs(): UpdatePoolDrainCall__Outputs {
    return new UpdatePoolDrainCall__Outputs(this);
  }
}

export class UpdatePoolDrainCall__Inputs {
  _call: UpdatePoolDrainCall;

  constructor(call: UpdatePoolDrainCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardDrainModifier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _wethDrainModifier(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdatePoolDrainCall__Outputs {
  _call: UpdatePoolDrainCall;

  constructor(call: UpdatePoolDrainCall) {
    this._call = call;
  }
}

export class UpdatePoolRewardLimiterCall extends ethereum.Call {
  get inputs(): UpdatePoolRewardLimiterCall__Inputs {
    return new UpdatePoolRewardLimiterCall__Inputs(this);
  }

  get outputs(): UpdatePoolRewardLimiterCall__Outputs {
    return new UpdatePoolRewardLimiterCall__Outputs(this);
  }
}

export class UpdatePoolRewardLimiterCall__Inputs {
  _call: UpdatePoolRewardLimiterCall;

  constructor(call: UpdatePoolRewardLimiterCall) {
    this._call = call;
  }

  get _poolRewardLimiter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolRewardLimiterCall__Outputs {
  _call: UpdatePoolRewardLimiterCall;

  constructor(call: UpdatePoolRewardLimiterCall) {
    this._call = call;
  }
}

export class UpdateRewardPerBlockCall extends ethereum.Call {
  get inputs(): UpdateRewardPerBlockCall__Inputs {
    return new UpdateRewardPerBlockCall__Inputs(this);
  }

  get outputs(): UpdateRewardPerBlockCall__Outputs {
    return new UpdateRewardPerBlockCall__Outputs(this);
  }
}

export class UpdateRewardPerBlockCall__Inputs {
  _call: UpdateRewardPerBlockCall;

  constructor(call: UpdateRewardPerBlockCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardPerBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateRewardPerBlockCall__Outputs {
  _call: UpdateRewardPerBlockCall;

  constructor(call: UpdateRewardPerBlockCall) {
    this._call = call;
  }
}

export class UpdateRewardPerBlockMassiveCall extends ethereum.Call {
  get inputs(): UpdateRewardPerBlockMassiveCall__Inputs {
    return new UpdateRewardPerBlockMassiveCall__Inputs(this);
  }

  get outputs(): UpdateRewardPerBlockMassiveCall__Outputs {
    return new UpdateRewardPerBlockMassiveCall__Outputs(this);
  }
}

export class UpdateRewardPerBlockMassiveCall__Inputs {
  _call: UpdateRewardPerBlockMassiveCall;

  constructor(call: UpdateRewardPerBlockMassiveCall) {
    this._call = call;
  }

  get pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get rewards(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateRewardPerBlockMassiveCall__Outputs {
  _call: UpdateRewardPerBlockMassiveCall;

  constructor(call: UpdateRewardPerBlockMassiveCall) {
    this._call = call;
  }
}

export class UpdateRewardUpdaterAddressCall extends ethereum.Call {
  get inputs(): UpdateRewardUpdaterAddressCall__Inputs {
    return new UpdateRewardUpdaterAddressCall__Inputs(this);
  }

  get outputs(): UpdateRewardUpdaterAddressCall__Outputs {
    return new UpdateRewardUpdaterAddressCall__Outputs(this);
  }
}

export class UpdateRewardUpdaterAddressCall__Inputs {
  _call: UpdateRewardUpdaterAddressCall;

  constructor(call: UpdateRewardUpdaterAddressCall) {
    this._call = call;
  }

  get _poolRewardUpdater(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRewardUpdaterAddressCall__Outputs {
  _call: UpdateRewardUpdaterAddressCall;

  constructor(call: UpdateRewardUpdaterAddressCall) {
    this._call = call;
  }
}

export class UpdateVictimInfoCall extends ethereum.Call {
  get inputs(): UpdateVictimInfoCall__Inputs {
    return new UpdateVictimInfoCall__Inputs(this);
  }

  get outputs(): UpdateVictimInfoCall__Outputs {
    return new UpdateVictimInfoCall__Outputs(this);
  }
}

export class UpdateVictimInfoCall__Inputs {
  _call: UpdateVictimInfoCall;

  constructor(call: UpdateVictimInfoCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _victim(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _victimPoolId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateVictimInfoCall__Outputs {
  _call: UpdateVictimInfoCall;

  constructor(call: UpdateVictimInfoCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
